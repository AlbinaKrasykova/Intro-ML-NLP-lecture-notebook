# -*- coding: utf-8 -*-
"""simplified_nltk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15VBStKeAgUn6JS2mT4ll4kCi00JWA4We
"""

!pip install nltk

import nltk
nltk.download('punkt')
nltk.download('stopwords')

#from sklearn.feature_extraction.text import TfidfVectorizer
#from nltk.tokenize import word_tokenize
#from nltk.stem import PorterStemmer
#from nltk.corpus import stopwords
#import math
#from nltk import sent_tokenize
#from nltk.tokenize import sent_tokenize
#from nltk.corpus import stopwords
#import numpy as np



text = ''' About the Breed
An immensely strong, heavy-duty worker of spitz type
, the Alaskan Malamute is an affectionate, l
oyal, and playful but dignified dog recognizable b
y his well-furred plumed tail carried over the back, erect ears, and substantial bone. The Alaskan Malamute stands 23 to 25 inches at the shoulder
 and weighs 75 to 85 pounds. Everything about Mals suggests their origin as an arctic sled dog: The heavy bone, deep chest, powerful shoulders, and dense, weatherproof coa
 t all scream, 'I work hard for a living!' But their almond-shaped brown eyes have an affectionate sparkle, suggesting Mals enjoy snuggling with their humans when the workday is done. Mals are pack animals. And in your family 'pack,' the leader must be you. If a Mal doesn't respect you, he will wind up owning you instead of the other way around. Firm but loving training should begin in early puppyhood. That said, a well-behaved Mal is a joy to be with'playful, gentle, friendly, and great with kids.'''

def final_summary_sklearn(text):
    # 1. Tokenize text into sentences
    sentences = sent_tokenize(text)

    # 2. Initialize stemmer and stop words
    ps = PorterStemmer()
    stop_words = set(stopwords.words("english"))

    # 3. Create TF-IDF vectorizer
    tfidf_vectorizer = TfidfVectorizer(tokenizer=lambda text: [ps.stem(word.lower()) for word in word_tokenize(text) if word.lower() not in stop_words])

    # 4. Fit and transform text to TF-IDF matrix
    tfidf_matrix = tfidf_vectorizer.fit_transform(sentences)

    # 5. Compute sentence scores
    sentence_scores = tfidf_matrix.sum(axis=1) / tfidf_matrix.getnnz(axis=1)

    # 6. Find the threshold
    threshold = sentence_scores.mean()

    # 7. Generate the summary
    summary = ''
    for i, sentence in enumerate(sentences):
        if np.any(sentence_scores[i] >= threshold):
            summary += " " + sentence

    return summary

print(final_summary_sklearn(text))